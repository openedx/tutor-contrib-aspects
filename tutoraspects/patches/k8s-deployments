{% if RUN_CLICKHOUSE %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clickhouse
  labels:
    app.kubernetes.io/name: clickhouse
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: clickhouse
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: clickhouse
    spec:
      containers:
        - env:
            - name: CLICKHOUSE_DB
              value: "{{ ASPECTS_XAPI_DATABASE }}"
            - name: CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT
              value: "1"
            - name: CLICKHOUSE_PASSWORD
              value: "{{ CLICKHOUSE_ADMIN_PASSWORD }}"
            - name: CLICKHOUSE_USER
              value: "{{ CLICKHOUSE_ADMIN_USER }}"
          image: {{ DOCKER_IMAGE_CLICKHOUSE }}
          name: clickhouse
          ports:
            - containerPort: {{ CLICKHOUSE_HOST_INSECURE_HTTP_PORT }}
            - containerPort: {{ CLICKHOUSE_HOST_INSECURE_NATIVE_PORT }}
            - containerPort: {{ CLICKHOUSE_HOST_TLS_NATIVE_PORT }}
          volumeMounts:
            - mountPath: /var/lib/clickhouse/
              name: data
            - mountPath: /etc/clickhouse-server/config.d/server_config.xml
              name: server-settings
              subPath: server_config.xml
            - mountPath: /etc/clickhouse-server/users.d/user_config.xml
              name: user-settings
              subPath: user_config.xml
      restartPolicy: Always
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: clickhouse
        - name: user-settings
          configMap:
            name: clickhouse-user-settings
        - name: server-settings
          configMap:
            name: clickhouse-server-settings
{% endif %}

{% if RUN_RALPH %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ralph
  labels:
    app.kubernetes.io/name: ralph
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ralph
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ralph
    spec:
      containers:
        - args:
            - "uvicorn"
            - "ralph.api:app"
            - "--proxy-headers"
            - "--log-config"
            - "/etc/ralph/logging.yaml"
            - "--port"
            - "{{ RALPH_PORT }}"
            - "--host"
            - "0.0.0.0"
          env:
            - name: RALPH_APP_DIR
              value: "/app/.ralph"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__EVENT_TABLE_NAME
              value: "{{ASPECTS_RAW_XAPI_TABLE}}"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__HOST
              value: "{{CLICKHOUSE_HOST}}"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__PASSWORD
              value: "{{CLICKHOUSE_ADMIN_PASSWORD}}"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__PORT
              value: "{{CLICKHOUSE_INTERNAL_HTTP_PORT}}"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__TEST_HOST
              value: "clickhouse"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__USERNAME
              value: "{{CLICKHOUSE_ADMIN_USER}}"
            - name: RALPH_BACKENDS__LRS__CLICKHOUSE__DATABASE
              value: "{{ASPECTS_XAPI_DATABASE}}"
            - name: RALPH_RUNSERVER_BACKEND
              value: "clickhouse"
            - name: RALPH_RUNSERVER_HOST
              value: "0.0.0.0"
            - name: RALPH_RUNSERVER_MAX_SEARCH_HITS_COUNT
              value: "100"
            - name: RALPH_RUNSERVER_POINT_IN_TIME_KEEP_ALIVE
              value: "1m"
            - name: RALPH_RUNSERVER_PORT
              value: "{{RALPH_PORT}}"
            {% if RALPH_EXTRA_SETTINGS %}
            {% for key, value in RALPH_EXTRA_SETTINGS.items() %}
            - name: {{key}}
              value: "{{value}}"
            {% endfor %}
            {% endif %}
          image: {{DOCKER_IMAGE_RALPH}}
          name: ralph
          ports:
            - containerPort: 8100
          resources: {}
          volumeMounts:
            - mountPath: /app/.ralph
              name: auth
            - mountPath: /etc/ralph
              name: ralph-logging
      restartPolicy: Always
      volumes:
        - name: auth
          configMap:
            name: ralph-settings
        - name: ralph-logging
          configMap:
            name: ralph-logging
{% endif %}

{% if RUN_SUPERSET %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset
  labels:
    app.kubernetes.io/name: superset
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: superset
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: superset
    spec:
      containers:
        - args:
            - bash
            - /app/docker/docker-bootstrap.sh
            - app-gunicorn
          name: superset
          ports:
            - containerPort: {{ SUPERSET_PORT }}
          image: {{ DOCKER_IMAGE_SUPERSET }}
          env:
            - name: DATABASE_DIALECT
              value: "{{ SUPERSET_DB_DIALECT }}"
            - name: DATABASE_HOST
              value: "{{ SUPERSET_DB_HOST }}"
            - name: DATABASE_PORT
              value: "{{ SUPERSET_DB_PORT }}"
            - name: DATABASE_DB
              value: "{{ SUPERSET_DB_NAME }}"
            - name: DATABASE_PASSWORD
              value: "{{ SUPERSET_DB_PASSWORD }}"
            - name: DATABASE_USER
              value: "{{ SUPERSET_DB_USERNAME }}"
            - name: OAUTH2_CLIENT_ID
              value: "{{ SUPERSET_OAUTH2_CLIENT_ID }}"
            - name: OAUTH2_CLIENT_SECRET
              value: "{{ SUPERSET_OAUTH2_CLIENT_SECRET }}"
            - name: SECRET_KEY
              value: "{{ SUPERSET_SECRET_KEY }}"
            - name: PYTHONPATH
              value: "/app/pythonpath:/app/docker/pythonpath_dev"
            - name: REDIS_HOST
              value: "{{ REDIS_HOST }}"
            - name: REDIS_PORT
              value: "{{ REDIS_PORT }}"
            - name: REDIS_PASSWORD
              value: "{{ REDIS_PASSWORD }}"
            - name: FLASK_DEBUG
              value: "0"
            - name: GUNICORN_KEEPALIVE
              value: '5'
            - name: SUPERSET_ENV
              value: "production"
            - name: SUPERSET_HOST
              value: "{{ SUPERSET_HOST }}"
            - name: SUPERSET_PORT
              value: "{{ SUPERSET_PORT }}"
            - name: OAUTH2_ACCESS_TOKEN_PATH
              value: "{{ SUPERSET_OAUTH2_ACCESS_TOKEN_PATH }}"
            - name: OAUTH2_AUTHORIZE_PATH
              value: "{{ SUPERSET_OAUTH2_AUTHORIZE_PATH }}"
            - name: OPENEDX_COURSES_LIST_PATH
              value: "{{ SUPERSET_OPENEDX_COURSES_LIST_PATH }}"
            - name: OPENEDX_LMS_ROOT_URL
              value: "{% if ENABLE_HTTPS %}https{% else %}http{% endif %}://{{ LMS_HOST }}"
          volumeMounts:
            - mountPath: /app/docker
              name: docker
            - mountPath: /app/pythonpath
              name: pythonpath
            - mountPath: /app/pythonpath/openedx
              name: pythonpath-openedx
            - mountPath: /app/security
              name: security
      volumes:
        - name: docker
          configMap:
            name: superset-docker
        - name: pythonpath
          configMap:
            name: superset-pythonpath
        - name: pythonpath-openedx
          configMap:
            name: superset-pythonpath-openedx
        - name: security
          configMap:
            name: superset-security
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker
  labels:
    app.kubernetes.io/name: superset-worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: superset-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: superset-worker
    spec:
      containers:
        - args:
            - bash
            - /app/docker/docker-bootstrap.sh
            - worker
          name: superset-worker
          ports:
            - containerPort: {{ SUPERSET_PORT }}
          image: {{ DOCKER_IMAGE_SUPERSET }}
          env:
            - name: DATABASE_DIALECT
              value: "{{ SUPERSET_DB_DIALECT }}"
            - name: DATABASE_HOST
              value: "{{ SUPERSET_DB_HOST }}"
            - name: DATABASE_PORT
              value: "{{ SUPERSET_DB_PORT }}"
            - name: DATABASE_DB
              value: "{{ SUPERSET_DB_NAME }}"
            - name: DATABASE_PASSWORD
              value: "{{ SUPERSET_DB_PASSWORD }}"
            - name: DATABASE_USER
              value: "{{ SUPERSET_DB_USERNAME }}"
            - name: OAUTH2_CLIENT_ID
              value: "{{ SUPERSET_OAUTH2_CLIENT_ID }}"
            - name: OAUTH2_CLIENT_SECRET
              value: "{{ SUPERSET_OAUTH2_CLIENT_SECRET }}"
            - name: SECRET_KEY
              value: "{{ SUPERSET_SECRET_KEY }}"
            - name: PYTHONPATH
              value: "/app/pythonpath:/app/docker/pythonpath_dev"
            - name: REDIS_HOST
              value: "{{ REDIS_HOST }}"
            - name: REDIS_PORT
              value: "{{ REDIS_PORT }}"
            - name: REDIS_PASSWORD
              value: "{{ REDIS_PASSWORD }}"
            - name: FLASK_DEBUG
              value: "0"
            - name: SUPERSET_ENV
              value: "production"
            - name: SUPERSET_HOST
              value: "{{ SUPERSET_HOST }}"
            - name: SUPERSET_PORT
              value: "{{ SUPERSET_PORT }}"
            - name: OAUTH2_ACCESS_TOKEN_PATH
              value: "{{ SUPERSET_OAUTH2_ACCESS_TOKEN_PATH }}"
            - name: OAUTH2_AUTHORIZE_PATH
              value: "{{ SUPERSET_OAUTH2_AUTHORIZE_PATH }}"
            - name: OPENEDX_COURSES_LIST_PATH
              value: "{{ SUPERSET_OPENEDX_COURSES_LIST_PATH }}"
            - name: OPENEDX_LMS_ROOT_URL
              value: "{% if ENABLE_HTTPS %}https{% else %}http{% endif %}://{{ LMS_HOST }}"
          volumeMounts:
            - mountPath: /app/docker
              name: docker
            - mountPath: /app/pythonpath
              name: pythonpath
            - mountPath: /app/pythonpath/openedx
              name: pythonpath-openedx
            - mountPath: /app/security
              name: security
            - mountPath: /app/scripts
              name: scripts
      volumes:
        - name: docker
          configMap:
            name: superset-docker
        - name: pythonpath
          configMap:
            name: superset-pythonpath
        - name: pythonpath-openedx
          configMap:
            name: superset-pythonpath-openedx
        - name: security
          configMap:
            name: superset-security
        - name: scripts
          configMap:
            name: superset-scripts
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker-beat
  labels:
    app.kubernetes.io/name: superset-worker-beat
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: superset-worker-beat
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: superset-worker-beat
    spec:
      containers:
        - args:
            - bash
            - /app/docker/docker-bootstrap.sh
            - beat
          name: superset-worker-beat
          ports:
            - containerPort: {{ SUPERSET_PORT }}
          image: {{ DOCKER_IMAGE_SUPERSET }}
          env:
            - name: DATABASE_DIALECT
              value: "{{ SUPERSET_DB_DIALECT }}"
            - name: DATABASE_HOST
              value: "{{ SUPERSET_DB_HOST }}"
            - name: DATABASE_PORT
              value: "{{ SUPERSET_DB_PORT }}"
            - name: DATABASE_DB
              value: "{{ SUPERSET_DB_NAME }}"
            - name: DATABASE_PASSWORD
              value: "{{ SUPERSET_DB_PASSWORD }}"
            - name: DATABASE_USER
              value: "{{ SUPERSET_DB_USERNAME }}"
            - name: OAUTH2_CLIENT_ID
              value: "{{ SUPERSET_OAUTH2_CLIENT_ID }}"
            - name: OAUTH2_CLIENT_SECRET
              value: "{{ SUPERSET_OAUTH2_CLIENT_SECRET }}"
            - name: SECRET_KEY
              value: "{{ SUPERSET_SECRET_KEY }}"
            - name: PYTHONPATH
              value: "/app/pythonpath:/app/docker/pythonpath_dev"
            - name: REDIS_HOST
              value: "{{ REDIS_HOST }}"
            - name: REDIS_PORT
              value: "{{ REDIS_PORT }}"
            - name: REDIS_PASSWORD
              value: "{{ REDIS_PASSWORD }}"
            - name: FLASK_DEBUG
              value: "0"
            - name: SUPERSET_ENV
              value: "production"
            - name: SUPERSET_HOST
              value: "{{ SUPERSET_HOST }}"
            - name: SUPERSET_PORT
              value: "{{ SUPERSET_PORT }}"
            - name: OAUTH2_ACCESS_TOKEN_PATH
              value: "{{ SUPERSET_OAUTH2_ACCESS_TOKEN_PATH }}"
            - name: OAUTH2_AUTHORIZE_PATH
              value: "{{ SUPERSET_OAUTH2_AUTHORIZE_PATH }}"
            - name: OPENEDX_COURSES_LIST_PATH
              value: "{{ SUPERSET_OPENEDX_COURSES_LIST_PATH }}"
            - name: OPENEDX_LMS_ROOT_URL
              value: "{% if ENABLE_HTTPS %}https{% else %}http{% endif %}://{{ LMS_HOST }}"
          volumeMounts:
            - mountPath: /app/docker
              name: docker
            - mountPath: /app/pythonpath
              name: pythonpath
            - mountPath: /app/pythonpath/openedx
              name: pythonpath-openedx
            - mountPath: /app/security
              name: security
      volumes:
        - name: docker
          configMap:
            name: superset-docker
        - name: pythonpath
          configMap:
            name: superset-pythonpath
        - name: pythonpath-openedx
          configMap:
            name: superset-pythonpath-openedx
        - name: security
          configMap:
            name: superset-security
      restartPolicy: Always
{% endif %}

{% if RUN_VECTOR %}
---
# log collection
# https://vector.dev/docs/setup/installation/platforms/kubernetes/
# https://github.com/timberio/vector/blob/master/distribution/kubernetes/vector-agent/
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vector
  labels:
    app.kubernetes.io/name: vector
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vector
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - pods
    verbs:
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vector
  labels:
    app.kubernetes.io/name: vector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vector
subjects:
  - kind: ServiceAccount
    name: vector
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: vector-priority
value: 10000000
globalDefault: false
description: "This priority class should be used for Vector service pods only."
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vector
  labels:
    app.kubernetes.io/name: vector
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vector
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vector
        vector.dev/exclude: "true"
    spec:
      serviceAccountName: vector
      dnsPolicy: ClusterFirst
      containers:
        - name: vector
          image: {{ DOCKER_IMAGE_VECTOR }}
          env:
            - name: VECTOR_SELF_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: VECTOR_SELF_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: VECTOR_SELF_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: PROCFS_ROOT
              value: /host/proc
            - name: SYSFS_ROOT
              value: /host/sys
            - name: VECTOR_LOG
              value: info
          volumeMounts:
            - name: data
              mountPath: /vector-data-dir
            - name: var-log
              mountPath: /var/log/
            - mountPath: /etc/vector/vector.toml
              name: config
              subPath: k8s.toml
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
      terminationGracePeriodSeconds: 60
      priorityClassName: vector-priority
      volumes:
        - name: config
          configMap:
            name: vector-config
        - name: data
          hostPath:
            path: /var/lib/vector
        - name: var-log
          hostPath:
            path: /var/log/
{% endif %}

{% if ASPECTS_ENABLE_EVENT_BUS_CONSUMER %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aspects-consumer
  labels:
    app.kubernetes.io/name: aspects-consumer
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: aspects-consumer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aspects-consumer
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: aspects-consumer
          image: {{ DOCKER_IMAGE_OPENEDX }}
          env:
          - name: SERVICE_VARIANT
            value: lms
          - name: DJANGO_SETTINGS_MODULE
            value: lms.envs.tutor.production
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
          securityContext:
            allowPrivilegeEscalation: false
          command:
            - "./manage.py"
            - "lms"
            - "consume_events"
            - "-t"
            - "analytics"
            - "-g"
            - "event_routing_backends"
            - "--extra"
            - '{"consumer_name": "aspects"}'
      volumes:
        - name: settings-lms
          configMap:
            name: openedx-settings-lms
        - name: settings-cms
          configMap:
            name: openedx-settings-cms
        - name: config
          configMap:
            name: openedx-config
{% endif %}

{% if RUN_ASPECTS_DOCS %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aspects-docs
  labels:
    app.kubernetes.io/name: aspects-docs
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: aspects-docs
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aspects-docs
    spec:
      containers:
      - name: aspects-docs
        args:
          - bash
          - /app/aspects/scripts/docs.sh
        env:
          - name: VENV_DIR
            value: /opt/venv
          - name: ASPECTS_EVENT_SINK_DATABASE
            value: {{ASPECTS_EVENT_SINK_DATABASE}}
          - name: ASPECTS_XAPI_DATABASE
            value: {{ASPECTS_XAPI_DATABASE}}
          - name: CLICKHOUSE_CLUSTER_NAME
            value: {{CLICKHOUSE_CLUSTER_NAME}}
          - name: DBT_STATE
            value: {{ DBT_STATE_DIR }}
          - name: ASPECTS_DATA_TTL_EXPRESSION
            value: "{{ ASPECTS_DATA_TTL_EXPRESSION }}"
          - name: DBT_PROFILE_TARGET_DATABASE
            value: "{{ DBT_PROFILE_TARGET_DATABASE }}"
          - name: DBT_PROFILES_DIR
            value: {{ DBT_PROFILES_DIR }}
          - name: DBT_BRANCH
            value: "{{ DBT_BRANCH }}"
          - name: DBT_REPOSITORY
            value: "{{ DBT_REPOSITORY }}"
          - name: DBT_SSH_KEY
            value: "{{ DBT_SSH_KEY }}"
        image: {{ DOCKER_IMAGE_ASPECTS }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 0
        volumeMounts:
          - mountPath: /app
            name: app
          - mountPath: /app/aspects/dbt
            name: dbt
          - mountPath: /app/aspects/scripts
            name: scripts
          - mountPath: /app/aspects/migrations/
            name: migrations
          - mountPath: /app/aspects/migrations/alembic
            name: alembic
          - mountPath: /app/aspects/migrations/alembic/versions
            name: versions
      volumes:
        - name: scripts
          configMap:
            name: aspects-scripts
            defaultMode: 0777
        - name: dbt
          configMap:
            name: aspects-dbt
        - name: app
          emptyDir: {}
        - name: migrations
          configMap:
            name: aspects-migrations
        - name: alembic
          configMap:
            name: aspects-migrations-alembic
        - name: versions
          configMap:
            name: aspects-migrations-alembic-versions
{% endif %}
